---
description: 
globs: 
alwaysApply: false
---
## 1. Ясность формулировки задачи
- Задача должна быть максимально конкретной и однозначной.

## 2. Минимализм в коде
- Код должен быть компактным, но при этом понятным.
- Избегайте избыточных комментариев, если они не добавляют ценности.
- Используйте только те библиотеки и зависимости, которые действительно необходимы.

## 3. Избегание создания лишних файлов
- Указывайте, где именно должен находиться код (в текущем файле или в новом).
- Если создание новых файлов не требуется, явно укажите это в запросе.
- Пример: "Не создавайте новые файлы. Добавьте код в существующий файл `main.py`."

## 4. Соблюдение структуры проекта
- Если проект уже имеет определенную структуру, укажите её.
- Например: "Добавьте код в папку `src/utils`, используя модуль `helper.py`."

## 5. Использование стандартных практик
- Код должен соответствовать общепринятым стандартам (PEP 8 для Python, ESLint для JavaScript и т.д.).
- Автоматически форматируйте код перед отправкой.

## 6. Проверка на работоспособность
- Генерируйте только рабочий код, который можно сразу использовать.
- Включите тестовые примеры или проверки, если это необходимо.

## 7. Ограничение зависимостей
- Используйте только те библиотеки, которые уже установлены в проекте.
- Если требуется установка новой библиотеки, явно укажите это в запросе.

## 8. Игнорирование ненужных действий
- Не выполняйте действия, которые не были запрошены.
- Например, если задача — написать функцию, то не создавайте документацию или тесты, если это не указано.

## 9. Обратная связь
- Если курсор не уверен в решении, он должен запросить уточнения вместо того, чтобы генерировать неправильный код.

## Рекомендации по внедрению правил

### 1. Настройка системных промптов
- Создайте шаблон промпта, который будет автоматически добавляться к каждому запросу пользователя:

### 2. Фильтрация ответов
- Проверяйте ответ на соответствие правилам перед отправкой пользователю.
- Используйте регулярные выражения для поиска лишних команд (например, `touch`, `mkdir`) или избыточных комментариев.

### 3. Интеграция с линтерами
- Подключите линтеры (например, Pylint для Python, ESLint для JavaScript) для автоматической проверки качества кода.

### 4. Ограничение действий через API
- Разрешите только чтение и запись в указанные файлы, но запретите создание новых файлов или директорий без явного разрешения.

### 5. Обучение модели
- Обучите модель на примерах, где правила применяются строго.
- Покажите модели примеры запросов и правильных ответов, где код минималистичен и соответствует требованиям.

### 6. Режим минимального кода
- Добавьте специальный режим (например, "Minimal Mode"), который активирует только базовые функции курсора и исключает любые дополнительные действия.

### 7. Тестирование и обратная связь
- После выполнения задачи предложите пользователю проверить результат и дать обратную связь.